// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fr_proxy.proto

package fr_proxy

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"

	pdpb "github.com/pingcap/kvproto/pkg/pdpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Contexts             []*kvrpcpb.Context `protobuf:"bytes,1,rep,name=contexts" json:"contexts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_fr_proxy_f22b3aa468334b08, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetContexts() []*kvrpcpb.Context {
	if m != nil {
		return m.Contexts
	}
	return nil
}

type Response struct {
	Timestamp *pdpb.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// If any of them are 0, TiDB can fallback to normal follower read.
	CommittedIndices     []uint64 `protobuf:"varint,2,rep,packed,name=committed_indices,json=committedIndices" json:"committed_indices,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_fr_proxy_f22b3aa468334b08, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetTimestamp() *pdpb.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Response) GetCommittedIndices() []uint64 {
	if m != nil {
		return m.CommittedIndices
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "fr_proxy.Request")
	proto.RegisterType((*Response)(nil), "fr_proxy.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FollowerReadProxy service

type FollowerReadProxyClient interface {
	// For every transaction which wants to get timestamp and committed
	// indices for all target regions, it can call the RPC.
	// The first item of request stream will trigger the service to get
	// timestamp from PD.
	GetTsAndCommittedIndices(ctx context.Context, opts ...grpc.CallOption) (FollowerReadProxy_GetTsAndCommittedIndicesClient, error)
}

type followerReadProxyClient struct {
	cc *grpc.ClientConn
}

func NewFollowerReadProxyClient(cc *grpc.ClientConn) FollowerReadProxyClient {
	return &followerReadProxyClient{cc}
}

func (c *followerReadProxyClient) GetTsAndCommittedIndices(ctx context.Context, opts ...grpc.CallOption) (FollowerReadProxy_GetTsAndCommittedIndicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FollowerReadProxy_serviceDesc.Streams[0], "/fr_proxy.FollowerReadProxy/GetTsAndCommittedIndices", opts...)
	if err != nil {
		return nil, err
	}
	x := &followerReadProxyGetTsAndCommittedIndicesClient{stream}
	return x, nil
}

type FollowerReadProxy_GetTsAndCommittedIndicesClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type followerReadProxyGetTsAndCommittedIndicesClient struct {
	grpc.ClientStream
}

func (x *followerReadProxyGetTsAndCommittedIndicesClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *followerReadProxyGetTsAndCommittedIndicesClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FollowerReadProxy service

type FollowerReadProxyServer interface {
	// For every transaction which wants to get timestamp and committed
	// indices for all target regions, it can call the RPC.
	// The first item of request stream will trigger the service to get
	// timestamp from PD.
	GetTsAndCommittedIndices(FollowerReadProxy_GetTsAndCommittedIndicesServer) error
}

func RegisterFollowerReadProxyServer(s *grpc.Server, srv FollowerReadProxyServer) {
	s.RegisterService(&_FollowerReadProxy_serviceDesc, srv)
}

func _FollowerReadProxy_GetTsAndCommittedIndices_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FollowerReadProxyServer).GetTsAndCommittedIndices(&followerReadProxyGetTsAndCommittedIndicesServer{stream})
}

type FollowerReadProxy_GetTsAndCommittedIndicesServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type followerReadProxyGetTsAndCommittedIndicesServer struct {
	grpc.ServerStream
}

func (x *followerReadProxyGetTsAndCommittedIndicesServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *followerReadProxyGetTsAndCommittedIndicesServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FollowerReadProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fr_proxy.FollowerReadProxy",
	HandlerType: (*FollowerReadProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTsAndCommittedIndices",
			Handler:       _FollowerReadProxy_GetTsAndCommittedIndices_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "fr_proxy.proto",
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contexts) > 0 {
		for _, msg := range m.Contexts {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFrProxy(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFrProxy(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.CommittedIndices) > 0 {
		dAtA3 := make([]byte, len(m.CommittedIndices)*10)
		var j2 int
		for _, num := range m.CommittedIndices {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFrProxy(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFrProxy(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Request) Size() (n int) {
	var l int
	_ = l
	if len(m.Contexts) > 0 {
		for _, e := range m.Contexts {
			l = e.Size()
			n += 1 + l + sovFrProxy(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovFrProxy(uint64(l))
	}
	if len(m.CommittedIndices) > 0 {
		l = 0
		for _, e := range m.CommittedIndices {
			l += sovFrProxy(uint64(e))
		}
		n += 1 + sovFrProxy(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFrProxy(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFrProxy(x uint64) (n int) {
	return sovFrProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contexts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contexts = append(m.Contexts, &kvrpcpb.Context{})
			if err := m.Contexts[len(m.Contexts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFrProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFrProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFrProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFrProxy
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &pdpb.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFrProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CommittedIndices = append(m.CommittedIndices, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFrProxy
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFrProxy
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFrProxy
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CommittedIndices = append(m.CommittedIndices, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CommittedIndices", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFrProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFrProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFrProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFrProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFrProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFrProxy
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFrProxy
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFrProxy(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFrProxy = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFrProxy   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("fr_proxy.proto", fileDescriptor_fr_proxy_f22b3aa468334b08) }

var fileDescriptor_fr_proxy_f22b3aa468334b08 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x2b, 0x8a, 0x2f,
	0x28, 0xca, 0xaf, 0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0xb8,
	0x0a, 0x52, 0x0a, 0x92, 0x20, 0xa2, 0x52, 0xbc, 0xd9, 0x65, 0x45, 0x05, 0xc9, 0x70, 0xae, 0x48,
	0x7a, 0x7e, 0x7a, 0x3e, 0x98, 0xa9, 0x0f, 0x62, 0x41, 0x45, 0xf9, 0x8b, 0x4a, 0x8b, 0x4b, 0xc0,
	0x4c, 0x88, 0x80, 0x92, 0x39, 0x17, 0x7b, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x0e,
	0x17, 0x47, 0x72, 0x7e, 0x5e, 0x49, 0x6a, 0x45, 0x49, 0xb1, 0x04, 0xa3, 0x02, 0xb3, 0x06, 0xb7,
	0x91, 0x80, 0x1e, 0xcc, 0x4c, 0x67, 0x88, 0x44, 0x10, 0x5c, 0x85, 0x52, 0x1a, 0x17, 0x47, 0x50,
	0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x2e, 0x17, 0x67, 0x49, 0x66, 0x6e, 0x6a, 0x71,
	0x49, 0x62, 0x6e, 0x81, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x11, 0xbf, 0x1e, 0xd8, 0x69, 0x21,
	0x30, 0xe1, 0x20, 0x84, 0x0a, 0x21, 0x6d, 0x2e, 0xc1, 0xe4, 0xfc, 0xdc, 0xdc, 0xcc, 0x92, 0x92,
	0xd4, 0x94, 0xf8, 0xcc, 0xbc, 0x94, 0xcc, 0xe4, 0xd4, 0x62, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x96,
	0x20, 0x01, 0xb8, 0x84, 0x27, 0x44, 0xdc, 0x28, 0x8a, 0x4b, 0xd0, 0x2d, 0x3f, 0x27, 0x27, 0xbf,
	0x3c, 0xb5, 0x28, 0x28, 0x35, 0x31, 0x25, 0x00, 0xe4, 0x6f, 0x21, 0x57, 0x2e, 0x09, 0xf7, 0xd4,
	0x92, 0x90, 0x62, 0xc7, 0xbc, 0x14, 0x67, 0x34, 0x0d, 0x42, 0x82, 0x7a, 0xf0, 0xe0, 0x82, 0xfa,
	0x4c, 0x4a, 0x08, 0x59, 0x08, 0xe2, 0x66, 0x25, 0x06, 0x0d, 0x46, 0x27, 0xb5, 0x1b, 0x2b, 0x38,
	0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f,
	0xe5, 0x18, 0xb8, 0x04, 0xf2, 0x8b, 0xd2, 0xf5, 0x4a, 0x32, 0xb3, 0xcb, 0xf4, 0xb2, 0xcb, 0xc0,
	0x81, 0x94, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xb7, 0x24, 0xb7,
	0x89, 0x01, 0x00, 0x00,
}
